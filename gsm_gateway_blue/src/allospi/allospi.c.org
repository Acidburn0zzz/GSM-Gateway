#include <linux/init.h>
#include <linux/module.h>
#include <linux/spi/spi.h>
#include <linux/delay.h>

#include "allospi.h"
#define MAX_SPIDEV 	7
#define MAX_SPEED	24000000
#define SPI_TEST	1

struct allospi {
	struct spi_device *spidev[MAX_SPIDEV];
};

struct allospi wc;

int allo_spi_write_direct(u8 word, int module)
{
//	printk("allospi: write dir:0x%x spidev:%d \n",word,module);
	if(!wc.spidev[module]) {
		printk("allospi: write dir: spi module:%d  not registered \n",module);
		return -1;
	}
		
	return spi_write(wc.spidev[module], &word, sizeof(word));
}
EXPORT_SYMBOL(allo_spi_write_direct);
int allo_spi_write(long unsigned int word,unsigned int size, int module)
{
//	printk("allospi: write spidev:%d \n", module);
	if(!wc.spidev[module]) {
		printk("allospi: write dir: spi module:%d  not registered \n",module);
		return -1;
	}
		
	return spi_write(wc.spidev[module], (const void *)word, size);
}
EXPORT_SYMBOL(allo_spi_write);

int allo_spi_read_direct(int module)
{
	int ret;
        u8 word;

//	printk("allospi: read dir spidev:%d \n",module);
	if(!wc.spidev[module]) {
		printk("allospi: read dir: spi module:%d  not registered \n",module);
		return -1;
	}
	ret = spi_read(wc.spidev[module], &word, sizeof(word));
//	printk("allospi: read val:0x%x \n",word);
        return word;
}
EXPORT_SYMBOL(allo_spi_read_direct);

int allo_spi_read(u8 *word, unsigned int size, int module)
{
#if 1
//	printk("allospi: write spidev:%d \n", module);
	if(!wc.spidev[module]) {
		printk("allospi: write dir: spi module:%d  not registered \n",module);
		return -1;
	}
		
	//wc.spidev[module]->bits_per_word = 32;
        //spi_setup(wc.spidev[module]);
	//return spi_read(wc.spidev[module], (u8 *)word, sizeof(word) * size);
	spi_read(wc.spidev[module], word, sizeof(u8) * size);
	//wc.spidev[module]->bits_per_word = 8;
        //spi_setup(wc.spidev[module]);
#endif
#if 0
	u8 cmd,i=0,rxbuf[64];
	memset(rxbuf,0,sizeof(rxbuf));
	cmd = 2; //GWSPI_TDM_READ;
	cmd |= ( (i&0x1f) << 3);
	spi_write(wc.spidev[module],&cmd, sizeof(cmd));
	spi_read(wc.spidev[module], &rxbuf, sizeof(rxbuf));
	for(i=0;i<64;i++) {
		printk("I:%d d:%x ",i,rxbuf[i]);
	}
	printk("\n");
#endif
	return 0;
}
EXPORT_SYMBOL(allo_spi_read);

struct device * allo_spi_get_dev(int module)
{
	printk("allospi: allo_spi_get_dev\n");
        return &wc.spidev[module]->dev;
}
EXPORT_SYMBOL(allo_spi_get_dev);
#ifdef SPI_TEST
#define GWSPI_TDM_WRITE		1
#define GWSPI_TDM_READ		2
#define GWSPI_TDM_FDUPLEX	6
#define GWSPI_REG_WRITE		3
#define GWSPI_REG_READ		4


static int rw_test(struct spi_device *spi)
{
	u8 cmd,i,rxbuf,txbuf=0xbb;

	for(i=0;i<26;i++) {
		cmd = GWSPI_REG_WRITE;
		cmd |= ( (i&0x1f) << 3);
		spi_write(spi,&cmd, sizeof(cmd));
		spi_write(spi,&txbuf, sizeof(i));
		printk("\n\t write: cmd: %x data:%x \n\n",cmd,txbuf);

		cmd = GWSPI_REG_READ;
		cmd |= ( (i&0x1f) << 3);
		spi_write(spi,&cmd, sizeof(cmd));
		spi_read(spi, &rxbuf, sizeof(rxbuf));
		printk("\n\t read: Idx: %x cmd:%x data:%x \n\n",i,cmd,rxbuf);
	}
	for(i=0;i<26;i++) {
		cmd = GWSPI_REG_WRITE;
		cmd |= ( (i&0x1f) << 3);
		allo_spi_write_direct(cmd,0);
		allo_spi_write_direct(i,0);
		printk("\n\t write: cmd: %x data:%x \n\n",cmd,i);

		cmd = GWSPI_REG_READ;
		cmd |= ( (i&0x1f) << 3);
		allo_spi_write_direct(cmd,0);
		rxbuf = allo_spi_read_direct(0);
		printk("\n\t read: Idx: %x cmd:%x data:%x \n\n",i,cmd,rxbuf);
	}
}
#endif
static int allospi_probe(struct spi_device *spi)
{
	char *tmp;
	int i;
	printk("allospi_probe\n");

	spi->bits_per_word = 32;
	spi->max_speed_hz = MAX_SPEED;
	spi_setup(spi);
	printk("speed:%d cs:%d mode:%d modalias:%s bits_per_word:%d\n",spi->max_speed_hz,spi->chip_select,spi->mode,spi->modalias,spi->bits_per_word);

	for(i=0;i<MAX_SPIDEV;i++) {
		tmp = kasprintf(GFP_KERNEL,"allospi%d",i);
		printk("allospi_probe: ref:%s modalias:%s \n",tmp,spi->modalias);
		if((strcmp(tmp,spi->modalias) == 0)) {
			printk("allospi_probe: match\n");
			wc.spidev[i] = spi;
			break;
		}
		printk("allospi_probe: NO match\n");
	}
	rw_test(spi);
	return 0;
}
static int allospi_remove(struct spi_device *spi)
{
	printk("allospi_remove\n");

	return 0;
}
static struct spi_driver allospi_driver0 = {
        .probe          = allospi_probe,
        .remove         = allospi_remove,
        .driver = {
                .name   = "allospi0",
                .owner  = THIS_MODULE,
        },
};
static struct spi_driver allospi_driver1 = {
        .probe          = allospi_probe,
        .remove         = allospi_remove,
        .driver = {
                .name   = "allospi1",
                .owner  = THIS_MODULE,
        },
};
static struct spi_driver allospi_driver2 = {
        .probe          = allospi_probe,
        .remove         = allospi_remove,
        .driver = {
                .name   = "allospi2",
                .owner  = THIS_MODULE,
        },
};


static int allospi_init(void)
{
	printk(KERN_ALERT "allospi module inserted.\n");
	spi_register_driver(&allospi_driver0);
	spi_register_driver(&allospi_driver1);
	spi_register_driver(&allospi_driver2);
return 0;
}
static void allospi_exit(void)
{
	printk(KERN_ALERT "allospi module removed.\n");
	spi_unregister_driver(&allospi_driver0);
	spi_unregister_driver(&allospi_driver1);
	spi_unregister_driver(&allospi_driver2);
}

module_init(allospi_init);
module_exit(allospi_exit);

MODULE_LICENSE("Dual BSD/GPL");
